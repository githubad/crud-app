{"version":3,"sources":["actions/index.js","reducers/index.js","reducers/reducer_posts.js","components/posts_index.js","components/posts_new.js","components/posts_show.js","serviceWorker.js","index.js"],"names":["FETCH_POSTS","ROOT_URL","API_KEY","CREATE_POST","FETCH_POST","DELETE_POST","rootReducer","combineReducers","posts","state","arguments","length","undefined","action","type","_","mapKeys","payload","data","Object","objectSpread","defineProperty","id","omit","form","formReducer","PostsIndex","this","props","fetchPosts","map","post","react_default","a","createElement","className","key","Link","to","concat","title","renderPosts","Component","connect","endpoint","request","axios","get","PostsNew","field","_field$meta","meta","touched","error","assign","placeholder","label","input","values","_this","createPost","history","push","handleSubmit","onSubmit","bind","redux_form_es","name","component","renderField","reduxForm","validate","errors","categories","content","callback","then","PostShow","match","params","fetchPost","deletePost","onClick","onDeleteClick","_ref","ownProps","delete","Boolean","window","location","hostname","createStoreWithMiddleware","applyMiddleware","promise","createStore","ReactDOM","render","es","store","reducers","BrowserRouter","class","Switch","Route","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf0a440a.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const FETCH_POSTS = 'FETCH_POSTS';\r\nconst ROOT_URL =\"https://reduxblog.herokuapp.com/api/\";\r\nconst API_KEY = \"?key=adnan123ede\";\r\nexport const CREATE_POST = 'CREATE_POST';\r\nexport const FETCH_POST = \"FETCH_POST\";\r\nexport const DELETE_POST = \"DELETE_POST\";\r\n\r\nexport function fetchPosts() {\r\n  const endpoint = `${ROOT_URL}/posts/${API_KEY}`;\r\n  const request = axios.get(endpoint);\r\n  return {\r\n    type: FETCH_POSTS,\r\n    payload: request\r\n  };\r\n}\r\n\r\nexport function createPost(values, callback) {\r\n  const endpoint = `${ROOT_URL}/posts/${API_KEY}`;\r\n  const request = axios.post(endpoint, values)\r\n  .then(() => callback());\r\n  return {\r\n    type: CREATE_POST,\r\n    payload: request\r\n  };\r\n}\r\n\r\n\r\nexport function fetchPost(id) {\r\n  const endpoint = `${ROOT_URL}/posts/${id}${API_KEY}`;\r\n  const request = axios.get(endpoint);\r\n  return {\r\n    type: FETCH_POST,\r\n    payload: request\r\n  };\r\n}\r\n\r\n\r\nexport function deletePost(id, callback) {\r\n  const endpoint = `${ROOT_URL}/posts/${id}${API_KEY}`;\r\n  const request = axios.delete(endpoint)\r\n  .then(() => callback());\r\n  return {\r\n    type: DELETE_POST,\r\n    payload: id\r\n  };\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport PostsReducer from './reducer_posts';\r\nimport {reducer as formReducer} from 'redux-form';\r\n\r\nconst rootReducer = combineReducers({\r\n    // state: (state = {}) => state\r\n    posts: PostsReducer,\r\n    form: formReducer\r\n\r\n});\r\n\r\nexport default rootReducer;\r\n","import {FETCH_POSTS, FETCH_POST, DELETE_POST} from '../actions';\r\nimport _ from 'lodash';\r\n\r\n\r\nexport default function(state = {}, action) {\r\n  switch (action.type) {\r\n\r\n    case FETCH_POSTS:\r\n    // console.log(action.payload.data); // [post1, post2] to // { 4: post }\r\n    return _.mapKeys(action.payload.data,'id');\r\n    // console.log(_.mapKeys(action.payload.data,'id'));\r\n    case FETCH_POST:\r\n    return { ...state, [action.payload.data.id]:action.payload.data}\r\n    case DELETE_POST:\r\n    return _.omit(state,action.payload);\r\n    default:\r\n    return state;\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {fetchPosts} from '../actions/index';\r\nimport _ from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass PostsIndex extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchPosts();\r\n  }\r\n\r\n  renderPosts() {\r\n    return _.map(this.props.posts, post => {\r\n      return (\r\n          <li className=\"list-group-item\" key={post.id} >\r\n            <Link to={`/posts/${post.id}`}>{post.title}</Link>\r\n          </li>\r\n\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.props.posts);\r\n    return (\r\n      <div>\r\n      <div className=\"text-xs-right\">\r\n        <Link to=\"/posts/new\" className=\"btn btn-primary\">\r\n        Add a Post\r\n        </Link>\r\n        \r\n      </div>\r\n      <h3>Posts</h3>\r\n      <ul className=\"list-group\">\r\n        {this.renderPosts()}\r\n      </ul>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {posts: state.posts};\r\n}\r\n\r\nexport default connect(mapStateToProps, {fetchPosts})(PostsIndex)\r\n","import React, {Component} from 'react';\r\nimport  { Field, reduxForm } from 'redux-form';\r\nimport {Link} from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { createPost } from '../actions';\r\n\r\nclass PostsNew extends Component {\r\n\r\n  renderField(field) {\r\n    const {meta: {touched, error }} = field;\r\n    const className = `form-group ${touched && error ? 'has-danger' : ''}`\r\n    return (\r\n      // {field.meta.invalid ? 'form-group has-danger' : 'form-group'}\r\n      <div className={className}>\r\n      <input\r\n        className=\"form-control \"\r\n        type=\"text\"\r\n        placeholder={field.label}\r\n        {...field.input}\r\n       />\r\n       <div className=\"text-help\">\r\n       {touched ? error : ''}\r\n       </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\nonSubmit(values) {\r\n  // console.log(values);\r\n  this.props.createPost(values, () => this.props.history.push('/'));\r\n\r\n\r\n}\r\n\r\n  render() {\r\n    const {handleSubmit} = this.props;\r\n    return (\r\n        <div>\r\n          <form className=\"myform\" onSubmit={handleSubmit(this.onSubmit.bind(this))}>\r\n            <Field\r\n            label=\"Your Title\"\r\n            name=\"title\"\r\n            component={this.renderField}\r\n            />\r\n            <Field\r\n            label=\"Categories\"\r\n            name=\"categories\"\r\n            component={this.renderField}\r\n            />\r\n            <Field\r\n            label=\"Post Content\"\r\n            name=\"content\"\r\n            component={this.renderField}\r\n            />\r\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            <Link to=\"/\" className=\"btn btn-danger\">Cancel</Link>\r\n          </form>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction validate(values) {\r\n  // console.log(values) -> {title: 'asdf', categories:'asdas', content: 'asdffdf'}\r\n  const errors = {};\r\n\r\n  //Validate the inputs from 'values' object\r\n  if(!values.title || values.title.length < 3) {\r\n    errors.title = 'Enter a title that is alteast 3 characters';\r\n  }\r\n\r\n  if(!values.categories) {\r\n    errors.categories = 'Enter some categories';\r\n  }\r\n\r\n  if(!values.content) {\r\n    errors.content = 'Enter some content please';\r\n  }\r\n\r\n\r\n  // If errors is empty, the form is fine to submit\r\n  return errors;\r\n}\r\n\r\nexport default reduxForm({\r\n  validate,\r\n  form: 'PostsNewForm'\r\n})(\r\n    connect(null, {createPost})(PostsNew)\r\n);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {fetchPost, deletePost} from '../actions';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass PostShow extends Component {\r\n  componentDidMount() {\r\n    if(!this.props.post) {\r\n    const {id} =this.props.match.params;\r\n    this.props.fetchPost(id);\r\n    }\r\n  }\r\n\r\nonDeleteClick() {\r\n  this.props.deletePost(this.props.match.params.id, () => {\r\n    return this.props.history.push('/');\r\n  });\r\n}\r\n\r\n  render() {\r\n    const {post} = this.props;\r\n    if(!post) {\r\n      return <div>Loading...</div>;\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n        <h3>Title:{post.title}</h3>\r\n        <h6>Categories:{post.categories}</h6>\r\n        <p>Content:{post.content}</p>\r\n        <Link to=\"/\">Back to Index</Link>\r\n        <button className=\"btn btn-danger pull-xs-right\"\r\n        onClick={this.onDeleteClick.bind(this)}>\r\n        Delete Post\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps({posts}, ownProps) { // by convention called ownProps (under PostsShow this.props === ownProps)\r\n  return  {post: posts[ownProps.match.params.id]};\r\n}\r\n\r\nexport default connect(mapStateToProps , {fetchPost, deletePost})(PostShow)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport reducers from './reducers';\r\nimport PostsIndex from './components/posts_index';\r\nimport PostsNew from './components/posts_new';\r\nimport promise from 'redux-promise';\r\nimport PostShow from './components/posts_show';\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport './style/style.css';\r\n\r\nconst createStoreWithMiddleware = applyMiddleware(promise)(createStore);\r\n\r\nReactDOM.render(\r\n  <Provider store={createStoreWithMiddleware(reducers)}>\r\n    <BrowserRouter>\r\n    <div class=\"main-div\">\r\n      <Switch>\r\n      <Route path=\"/crud-app/posts/new\" component={PostsNew} />\r\n      <Route path=\"/crud-app/posts/:id\" component={PostShow} />\r\n      <Route path=\"/crud-app\" component={PostsIndex} />\r\n      </Switch>\r\n    </div>\r\n    </BrowserRouter>\r\n  </Provider>\r\n  , document.getElementById(\"root\"));\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}